/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/games/seaBattle/seaBattle.js":
/*!***************************************************!*\
  !*** ./resources/js/games/seaBattle/seaBattle.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   destroyShip: () => (/* binding */ destroyShip),\n/* harmony export */   gameOver: () => (/* binding */ gameOver),\n/* harmony export */   getGameOverInfo: () => (/* binding */ getGameOverInfo),\n/* harmony export */   preparation: () => (/* binding */ preparation),\n/* harmony export */   setMoveId: () => (/* binding */ setMoveId),\n/* harmony export */   startGame: () => (/* binding */ startGame),\n/* harmony export */   timerSwitch: () => (/* binding */ timerSwitch)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n// Демонстрация на экране координат Х и У\nvar abc = 'ABCDEFGHIJ';\nfor (var i = 0; i < 10; i++) {\n  var viewX = $('<div></div>').addClass('view-coord').html(abc[i]);\n  var viewY = $('<div></div>').addClass('view-coord').html(i + 1);\n  $('.view-x').append(viewX);\n  $('.view-y').append(viewY);\n}\n\n// Показывать текст с предупреждением\nfunction infoPanel(text) {\n  clearTimeout(timerView);\n  $('.panel-info').html(text).css('display', 'block');\n  timerView = setTimeout(function () {\n    return $('.panel-info').css('display', 'none');\n  }, 5000);\n}\n\n// Принудительно отключение от канала\nfunction forcedShutdown() {\n  if (window.usersPrivate.length === 2) {\n    var id1 = window.usersPrivate[0].id;\n    var id2 = window.usersPrivate[1].id;\n    var roomName = 'Sea-battle-' + Math.min(id1, id2) + '-' + Math.max(id1, id2);\n    window.Echo.leave(roomName);\n  }\n}\n\n// Генерация ячеек 10х10\nfunction setCells(cellName, field) {\n  for (var y = 0; y < 10; y++) {\n    for (var x = 0; x < 10; x++) {\n      var cell = $('<div></div>').addClass(cellName); // Создаем ячейку\n\n      if (cellName == 'my-cell') $(cell).attr('status', 0);\n      $(cell).attr('letter', abc[x]).attr('posX', x + 1).attr('posY', y + 1);\n      $(field).append(cell);\n    }\n  }\n}\n\n// Переключатель таймера\nfunction timerSwitch(whose) {\n  $('.' + move + '-timer-game').css('color', '#000');\n  move = whose;\n  $('.' + whose + '-timer-game').css('color', 'red');\n  timerWorker.postMessage({\n    command: 'stop-timer'\n  });\n  timerWorker.postMessage({\n    command: 'game-' + whose + '-timer'\n  });\n\n  // Замена текста хода\n  var moveText = whose === 'my' ? \"You'r move!\" : 'Enemy move!';\n  $('.players-move').html(moveText).css('animation', whose === 'my' ? 'shadowAnimation 1s infinite' : 'none');\n}\n\n// ================================================================================\n\nvar timerWorker = new Worker('/js/games/seaBattle/timer-worker.js');\ntimerWorker.postMessage({\n  command: 'csrf',\n  csrf: csrf\n});\nvar statusList = ['empty', 'selected', 'occupied', 'buffer']; // Статус клетки поля\nvar arrColors = ['', '#2FCC71', '#1e488c', '']; // Цвета клетки (F4CA16 - желтый)\nvar fieldOfFire = []; // Поле для фиксирования выстрелов\nvar field = []; // Игровое поле 10х10\nvar ships = []; // Корабли - их тип и координаты\nvar numOfShips = [4, 3, 2, 1]; // Кол-во кораблей (от мелких до большого)\nvar selectedShip = 0;\nvar align = 'x';\nvar timerView;\nvar moveId = 0;\nvar move;\nfor (var y = 0; y < 10; y++) {\n  field[y] = [];\n  fieldOfFire[y] = [];\n  for (var x = 0; x < 10; x++) {\n    field[y].push(0);\n    fieldOfFire[y].push(0);\n  }\n}\nfunction setMoveId(item) {\n  moveId = item;\n}\n\n// === Очистка поля ===\nfunction clearField() {\n  numOfShips = [4, 3, 2, 1];\n  ships = [];\n  for (var _y = 0; _y < 10; _y++) {\n    field[_y] = [];\n    for (var _x = 0; _x < 10; _x++) {\n      field[_y].push(0);\n    }\n  }\n  $('.my-cell').css('background', '').attr('status', 0);\n  numOfShips.forEach(function (item, index) {\n    $('.quantity-' + (index + 1)).html(item + 'x:');\n  });\n}\n\n// === Показываем выбранный кораблик на поле ===\nfunction viewShipHover(element, status) {\n  if (selectedShip < 1 || selectedShip > 4) return 0;\n  var elements = [];\n  var thisX = Number($(element).attr('posx'));\n  var thisY = Number($(element).attr('posy'));\n  var freeCell = true;\n  // Поворот фигуры\n  var rX = align == 'x' ? 1 : 0;\n  var rY = align == 'y' ? 1 : 0;\n  if (thisY > 11 - selectedShip && rY) thisY = 11 - selectedShip;else if (thisX > 11 - selectedShip && rX) thisX = 11 - selectedShip;\n\n  // Проверяем клетки и записываем в массив \n  for (var _i = 0; _i < selectedShip; _i++) {\n    var cell = $(\"[posX = \\\"\".concat(thisX + _i * rX, \"\\\"][posY = \\\"\").concat(thisY + _i * rY, \"\\\"]\"));\n    if (cell.attr('status') != 0 && cell.attr('status') != 1) freeCell = false;\n    elements.push(cell);\n  }\n\n  // Отображаем кораблик на поле\n  elements.forEach(function (item) {\n    if (freeCell) item.attr('status', status); // Устанавливаем статус клекте, если она свободна\n\n    // Красим клетки в подходящий цвет\n    if (status === 0 || freeCell) {\n      var itemStatus = Number($(item).attr('status'));\n      item.css('background', arrColors[itemStatus]);\n    } else item.css('background', 'red');\n  });\n}\n\n// === Размещение корабля на поле ===\nfunction putShip(cells) {\n  var shipType = cells.length; // Тип корабля (одинарный, двойной...)\n\n  // Этап проверок\n  if ($('.btn-ship:checked').length == 0) {\n    infoPanel('Select the desired ship!');\n    return 0;\n  }\n  if (numOfShips[shipType - 1] < 1) {\n    infoPanel('Maximum number of ships of this type!');\n    return 0;\n  }\n  if (cells.length < 1 || shipType > 4) return 0;\n  var numberShip = numOfShips.reduce(function (accumulator, currentValue) {\n    return accumulator + currentValue;\n  }, 0);\n\n  // Формируем объект корабль\n  var ship = {\n    type: shipType,\n    numberShip: numberShip\n  };\n  cells.each(function (index, item) {\n    if ($(item).attr('status') != 1) return 0; // Если клетка занята - leave\n\n    ship['posx' + index] = Number($(item).attr('posx'));\n    ship['posy' + index] = Number($(item).attr('posy'));\n    field[ship['posy' + index] - 1][ship['posx' + index] - 1] = numberShip;\n\n    // Закрываем клетки, которые находятся рядом\n    for (var _y2 = -1; _y2 < 2; _y2++) {\n      for (var _x2 = -1; _x2 < 2; _x2++) {\n        var thisCell = $(\"[posX = \\\"\".concat(ship['posx' + index] + _x2, \"\\\"][posY = \\\"\").concat(ship['posy' + index] + _y2, \"\\\"]\"));\n        if (thisCell.attr('status') == 0) {\n          thisCell.attr('status', 3);\n          // field[ship['posy' + index] + y - 1][ship['posx' + index] + x - 1] = 2;\n        }\n      }\n    }\n  });\n\n  // -1 на экране доступных кораблей\n  var quantity = $('.quantity-' + shipType).html()[0];\n  $('.quantity-' + shipType).html(quantity - 1 + 'x:');\n  ships.push(ship);\n  numOfShips[shipType - 1]--; // Уменьшаем кол-во доступных кораблей на 1\n\n  viewShipHover(cells[0], 2); // Ставим корабль на поле\n}\n\n// === Рандомное размещение кораблей на поле ===\nfunction randomField() {\n  clearField();\n  var arrWidthCoords = []; // Координаты и статус всех ячеек\n\n  for (var _y3 = 1; _y3 < 11; _y3++) {\n    for (var _x3 = 1; _x3 < 11; _x3++) {\n      var obj = {\n        'x': _x3,\n        'y': _y3,\n        'status': 0\n      };\n      arrWidthCoords.push(obj);\n    }\n  }\n\n  // Проходимся по каждому кораблю\n  var _loop = function _loop() {\n    var type = _i2;\n    var num = numOfShips[_i2 - 1];\n    selectedShip = type;\n\n    // Текущий корабль\n    var _loop2 = function _loop2() {\n      // Рандомное положение корабля\n      var randomAlign = Math.round(Math.random()) == 0 ? 'x' : 'y'; // Паралельно координате\n      var xory = randomAlign === 'x' ? 'y' : 'x';\n      align = xory;\n\n      // x or y = MAX 10 - type + 1\n      var freeCells = arrWidthCoords.filter(function (item) {\n        return item.status === 0 && item[xory] <= 10 - type + 1;\n      });\n      var placesForShip = [];\n\n      // Находим все доступные места для корабля на поле\n      freeCells.forEach(function (item) {\n        var firstCoord = item[xory];\n        var alignCoord = item[randomAlign];\n        var place = []; // Предпологаемое место корабля\n        var check = 0;\n        var _loop3 = function _loop3(cell) {\n          // Ищем следующий элемент\n          var foundCell = arrWidthCoords.find(function (obj) {\n            return obj[xory] == firstCoord + cell && obj[randomAlign] == alignCoord;\n          });\n          place.push(foundCell);\n          if (foundCell.status === 0) check++;else return 1; // break\n          // check += (thisCell.status === 0) ? 1 : 0; \n        };\n        for (var cell = 0; cell < type; cell++) {\n          if (_loop3(cell)) break;\n        }\n        if (check === type) placesForShip.push(place);\n      });\n\n      // Выбираем рандомуню клетку из доступных мест\n      var index = Math.floor(Math.random() * placesForShip.length);\n      var randomPlace = placesForShip[index];\n\n      // Выбираем элементы поля DOM\n      var _loop4 = function _loop4() {\n        var posx = randomPlace[el].x;\n        var posy = randomPlace[el].y;\n        var thisCell = $(\"[posx = \\\"\".concat(posx, \"\\\"][posy = \\\"\").concat(posy, \"\\\"]\"));\n        thisCell.attr('status', 1); // Занимаем клетку для корабля\n\n        // Так же занимаем клетку в массиве свободных клеток\n        var _loop5 = function _loop5(_y4) {\n          var _loop6 = function _loop6(_x4) {\n            if (posy + _y4 < 1 || posx + _x4 < 1 || posy + _y4 > 10 || posx + _x4 > 10) return 1; // continue\n            var id = arrWidthCoords.findIndex(function (obj) {\n              return obj.x == posx + _x4 && obj.y == posy + _y4;\n            });\n            arrWidthCoords[id].status = 1;\n          };\n          for (var _x4 = -1; _x4 < 2; _x4++) {\n            if (_loop6(_x4)) continue;\n          }\n        };\n        for (var _y4 = -1; _y4 < 2; _y4++) {\n          _loop5(_y4);\n        }\n      };\n      for (var el = 0; el < type; el++) {\n        _loop4();\n      }\n      var cells = $(\"[status = 1]\");\n      putShip(cells);\n    };\n    for (var j = 0; j < num; j++) {\n      _loop2();\n    }\n  };\n  for (var _i2 = numOfShips.length; _i2 > 0; _i2--) {\n    _loop();\n  }\n  $('#ship-4').click();\n}\n\n// =======================================================================================\n\n// ===== Подготовка к игре =====\nfunction preparation() {\n  sessionStorage.setItem('reboot', true); // Перезагрузка страницы - проигрыш\n\n  $('.search').remove();\n  setCells('my-cell', '.my-field');\n  $('.game').css('display', 'flex');\n\n  // Запускаем таймер\n  timerWorker.postMessage({\n    command: 'preparation-timer'\n  });\n  timerWorker.onmessage = function (event) {\n    if (event.data === \"end-preparation\") {\n      ready(field, ships, numOfShips);\n    } else {\n      $('.timer-value').html(event.data);\n    }\n  };\n\n  // === Обработка нажатий на кнопки ===\n  $('.my-cell').on('click', function () {\n    var cells = $(\"[status = 1]\"); // Координаты занятых клеток\n    putShip(cells);\n  }).on('mouseenter', function () {\n    viewShipHover($(this), 1);\n  }).on('mouseleave', function () {\n    viewShipHover($(this), 0);\n  });\n  $('.btn-ship').on('click', function () {\n    selectedShip = Number($(this).attr('id').slice(-1));\n  });\n\n  // Поворот корабля на 90 град\n  $('#rotate').on('click', function () {\n    align = align === 'x' ? 'y' : 'x';\n    ;\n  });\n\n  // Очистка поля\n  $('#clear-field').on('click', function () {\n    clearField();\n  });\n\n  // Рандомное заполнение поля\n  $('#random-field').on('click', function () {\n    randomField();\n  });\n\n  // Готовность к игре\n  $('#ready').on('click', function () {\n    for (var _i3 = 0; _i3 < numOfShips.length; _i3++) {\n      if (numOfShips[_i3] !== 0) {\n        infoPanel('Place all ships on the field!');\n        return 0;\n      }\n    }\n    timerWorker.postMessage({\n      command: 'stop-timer'\n    });\n    ready(field, ships, numOfShips);\n  });\n  $('#ship-4').click();\n}\n\n// Ожидание оппонента (ОТПРАВИТЬ НА СЕРВЕР ПРОВЕРКУ ВРЕМЕНИ ЧЕРЕЗ 1 МИНУТУ!!!)\nfunction waitingEnemy() {\n  var gif = $('<div></div>').addClass('gif-box').css({\n    'height': '213px',\n    'width': 'auto',\n    'box-shadow': '0 0 8px 8px #C8C8C8 inset'\n  });\n  var text = $('<p>Waiting for the opponent...</p>').addClass('timer-ship');\n  $('.ships-block').html(gif).append(text).css('justify-content', 'center');\n  $('.my-cell').off('click').off('mouseenter').off('mouseleave');\n}\n\n// ===== Готов к игре =====\nfunction ready(fieldDB, shipsDB) {\n  // Отправляем данные на сервер. При положительном ответе запускаем игру startGame\n  var url = '/game/sea-battle/ready-game';\n  axios.post(url, {\n    field: fieldDB,\n    ships: shipsDB\n  }).then(function (res) {\n    switch (res.data.status) {\n      case 0:\n        console.log(res.data);\n        window.Echo.disconnect();\n        return 0;\n      case 1:\n        // Waiting enemy; ships - error\n        waitingEnemy();\n        break;\n      case 2:\n        // Waiting enemy; ships - OK\n        moveId = res.data.moveId;\n        startGame();\n        break;\n    }\n\n    // Опопвещаем игрока, что корабли были сгенерированы на сервере\n    if (res.data.shipsError) {\n      infoPanel('The field with your ships was random generated!');\n    }\n\n    // Прорисовка итогового поля\n    clearField();\n    res.data.ships.forEach(function (obj) {\n      var len = Object.keys(obj).length / 2; // Длина корабля\n\n      for (var _i4 = 0; _i4 < len; _i4++) {\n        var cell = $(\"[posx = \\\"\".concat(obj['posx' + _i4], \"\\\"][posy = \\\"\").concat(obj['posy' + _i4], \"\\\"].my-cell\"));\n        cell.attr('status', 2).css('background', '#1e488c'); // Занимаем клетку для корабля\n      }\n    });\n  })[\"catch\"](function (error) {\n    console.log(error);\n  });\n}\n\n// =======================================================================================\n\n// ===== Начало игры (главная функция) =====\nfunction startGame() {\n  $('.menu').remove();\n  $('.my-cell').each(function (index, item) {\n    var status = Number($(item).attr('status'));\n    if (status == 1) {\n      $(item).attr('status', 0);\n      status = 0;\n    }\n    $(item).css('background', arrColors[status]);\n  });\n  $('.my-cell').off('click').off('mouseenter').off('mouseleave');\n\n  // Создаем второе поле\n  setCells('his-cell', '.his-field');\n  $('.field2').css('display', 'flex');\n  $('.game-menu').css('display', 'flex');\n\n  // Запуск таймера игры\n  move = moveId == myID ? 'my' : 'his';\n  $('.' + move + '-timer-game').css('color', 'red');\n  timerWorker.postMessage({\n    command: 'game-' + move + '-timer'\n  });\n  timerWorker.onmessage = function (event) {\n    switch (event.data) {\n      case \"end-my-game\":\n        getGameOverInfo(false);\n        break;\n      case \"end-his-game\":\n        getGameOverInfo(true);\n        break;\n      default:\n        $('.' + move + '-timer-game').html(event.data);\n    }\n  };\n\n  // Чей ход?\n  var moveText = move === 'my' ? \"You'r move!\" : 'Enemy move!';\n  $('.players-move').html(moveText).css('animation', move === 'my' ? 'shadowAnimation 1s infinite' : 'none');\n\n  // === Методы обработки нажатия на поле соперника ===\n  $('.his-cell').on('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var thisMoveId, posy, posx;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(moveId == myID)) {\n            _context.next = 12;\n            break;\n          }\n          thisMoveId = moveId;\n          posy = Number($(this).attr('posy'));\n          posx = Number($(this).attr('posx'));\n          moveId = 0;\n          if (!(fieldOfFire[posy - 1][posx - 1] === 0)) {\n            _context.next = 11;\n            break;\n          }\n          _context.next = 8;\n          return shot(posx, posy, thisMoveId, $(this));\n        case 8:\n          moveId = _context.sent;\n          _context.next = 12;\n          break;\n        case 11:\n          moveId = thisMoveId;\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, this);\n  })));\n\n  // Сдаться\n  $('#give-up').on('click', function () {\n    gameOver(true);\n  });\n}\n\n// ===== Конец игры =====\nfunction gameOver(showInfo) {\n  var url = '/game/sea-battle/game-over';\n  axios.post(url, {\n    check: 'qwerty'\n  }).then(function (res) {\n    if (!res.data) console.log('Status: Error');else if (showInfo) getGameOverInfo(false);\n  })[\"catch\"](function (error) {\n    console.log(\"Server error...\\n\" + error);\n  });\n}\n\n// Информация про конец игры\nfunction getGameOverInfo(winOrLose) {\n  sessionStorage.setItem('checkGameOver', true); // Конец игры (true)\n\n  timerWorker.postMessage({\n    command: 'stop-timer'\n  }); // Останавливаем таймер\n\n  $('.my-cell').off('click').off('mouseenter').off('mouseleave');\n  $('.his-cell').off('click');\n  $('#give-up').prop('disabled', true);\n  var gameOverText = $('<p>Game over!</p>');\n  var whoWinText = $('<p></p>').html(winOrLose ? 'Victory!' : 'Loss!').css('color', winOrLose ? 'green' : 'red');\n  $('.general-info').html(gameOverText).append(whoWinText);\n  $('.ships-block').html(gameOverText).append(whoWinText).css('justify-content', 'center');\n}\n\n// Фиксация выстрела (Возвращает id игрока, который должен ходить)\nfunction shot(_x5, _x6, _x7, _x8) {\n  return _shot.apply(this, arguments);\n} // Корабль уничтожен\nfunction _shot() {\n  _shot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(posx, posy, moveId, cell) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n            // Отправляем данные на сервер. Выстрел по полю игрока\n            var url = '/game/sea-battle/shot';\n            axios.post(url, {\n              posx: posx,\n              posy: posy\n            }).then(function (res) {\n              var _res$data$moveId;\n              moveId = (_res$data$moveId = res.data.moveId) !== null && _res$data$moveId !== void 0 ? _res$data$moveId : moveId; // Следующий ход для игрока \n              fieldOfFire[posy - 1][posx - 1] = 1; // Записываем выстрел\n\n              switch (res.data.status) {\n                case 0:\n                  console.log('Error shot...\\n'); // Error, status - 0\n                  fieldOfFire[posy - 1][posx - 1] = 0;\n                  break;\n                case 1:\n                  // Промах\n                  cell.html('●󠇫').addClass('busy-cell');\n                  timerSwitch('his');\n                  break;\n                case 2:\n                  // Попадание\n                  cell.html('x').css('color', 'red').addClass('busy-cell');\n                  break;\n                case 3:\n                  // Уничтожил\n                  cell.html('x').css('color', 'red').addClass('busy-cell');\n                  destroyShip(res.data.ship, 'his');\n                  break;\n                case 4:\n                  // Победа\n                  cell.html('x').css('color', 'red').addClass('busy-cell');\n                  destroyShip(res.data.ship, 'his');\n                  getGameOverInfo(true);\n                  break;\n              }\n              resolve(moveId); // Возвращаем promise после обработки ответа от сервера\n            })[\"catch\"](function (error) {\n              console.log(\"Server error...\\n\" + error);\n              resolve(moveId);\n            });\n          }));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _shot.apply(this, arguments);\n}\nfunction destroyShip(ship, whose) {\n  for (var _i5 = 0; _i5 < ship['type']; _i5++) {\n    for (var _y5 = -1; _y5 < 2; _y5++) {\n      for (var _x9 = -1; _x9 < 2; _x9++) {\n        var cell = $(\"[posx = \\\"\".concat(ship['posx' + _i5] + _x9, \"\\\"][posy = \\\"\").concat(ship['posy' + _i5] + _y5, \"\\\"].\").concat(whose, \"-cell\"));\n        if (ship['posy' + _i5] + _y5 < 1 || ship['posx' + _i5] + _x9 < 1 || ship['posy' + _i5] + _y5 > 10 || ship['posx' + _i5] + _x9 > 10 || cell.hasClass('busy-cell')) continue;\n        cell.html('●󠇫').addClass('busy-cell');\n        whose === 'his' ? fieldOfFire[ship['posy' + _i5] + _y5 - 1][ship['posx' + _i5] + _x9 - 1] = 1 : 0;\n      }\n    }\n  }\n  var horm = whose === 'his' ? 'my' : 'his';\n  var numDestroy = Number($(\".\".concat(horm, \"-destroy\")).html()) + 1;\n  $(\".\".concat(horm, \"-destroy\")).html(numDestroy);\n}\n\n// ==========================================================================================//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/games/seaBattle/seaBattle.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/games/seaBattle/seaBattle.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;